"""
Django settings for lms project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

# Адрес проекта для ссылок.
BASE_URL = 'http://127.0.0.1:8000'

from pathlib import Path
import os
from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Разрешенные хосты.
ALLOWED_HOSTS = [
    # Любой.
    '*'
]

# Любые источники запросов.
CORS_ORIGIN_ALLOW_ALL = True

# Конкретные.
#CORS_ORIGIN_WHITELIST = [
    #'http://localhost:3000',
    #'http://another-domain.com',
#]

# Для работы тулбарчика.
INTERNAL_IPS = [
    '127.0.0.1',
]

# Настройка Content Security Policy (CSP).
# Разрешаем загружать контент только с того же источника (сайта).
CSP_DEFAULT_SRC = ("'self'",)
# Разрешаем только указанным сайтам встраивать наш сайт в iframe.
# Разрешаем любым сайтам встраивать наш сайт в iframe.
CSP_FRAME_ANCESTORS = ("*",)
# Разрешаем загружать фреймы с любых источников.
CSP_FRAME_SRC = ("*",)
# Разрешаем загружать скрипты только из основных источников.
CSP_SCRIPT_SRC = (
    "'self'",
    "cdnjs.cloudflare.com",
    "www.google.com",
    "www.gstatic.com"
)
# Разрешаем загружать стили из любых источников.
CSP_STYLE_SRC = ("*",)
# Разрешаем загружать изображения из любых источников.
CSP_IMG_SRC = ("*",)
# Разрешаем загружать медиа из любых источников.
CSP_MEDIA_SRC = ("*",)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Расширенные права.
    'guardian',
    # Подключаем фильтры
    'django_filters',
    # Select2.
    'django_select2',
    # CKEditor.
    'ckeditor',
    'ckeditor_uploader',
    # Чистильщик.
    'django_cleanup.apps.CleanupConfig',
    # Импорт ядра.
    'core.apps.CoreConfig',
    # Импорт материалов.
    'materials.apps.MaterialsConfig',
    # Импорт траектоий.
    'learning_path.apps.LearningPathConfig',
    # Импорт тестирования.
    'testing.apps.TestingConfig',
    # Подключаем API.
    'corsheaders',
    'rest_framework',
    'rest_framework_api_key',
    # Подключаем курсы.
    'works.apps.WorksConfig',
    # Подключаем работы.
    'courses.apps.CoursesConfig',
    # Подключаем мероприятия.
    'events.apps.EventsConfig',
    # Подключаем переодические задачи.
    'django_apscheduler',
    # Подключаем рассылки.
    'emails.apps.EmailsConfig',
    # Подключаем отзывы.
    'reviews.apps.ReviewsConfig',
    # Подключаем лидеров.
    'leaders.apps.LeadersConfig',
    # Тулбарчик.
    'debug_toolbar',
    # Защита контента.
    'csp',
    # Капча.
    'django_recaptcha',
]

MIDDLEWARE = [
    # Хэдерс. Лучше всегда в начале.
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # Фреймы.
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Тулбар.
    #'debug_toolbar.middleware.DebugToolbarMiddleware',
    # Обработка ProtectedError
    'core.middleware.middleware.ProtectedErrorMiddleware',
]

ROOT_URLCONF = 'lms.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # Проверка шаблонов в корне.
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # Свой процессор.
                'core.context_processors.context_processor',
            ],
        },
    },
]

#Асинхронный обработкик.
ASGI_APPLICATION = 'lms.asgi.application'
#Синхронный обработкик.
WSGI_APPLICATION = 'lms.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'OPTIONS': {
            'timeout': 60,  # Увеличиваем тайм-аут до 20 секунд
        }
    }
}

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.postgresql',
#        'NAME': 'django_db',
#        'USER': 'postgres',
#        'PASSWORD': 'newpassword',
#        'HOST': '127.0.0.1',  # Если PostgreSQL работает локально.
#        'PORT': '5432',  # Пустая строка означает, что будет использоваться порт по умолчанию (5432).
#    }
#}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

# Язык и даты.
LANGUAGE_CODE = 'ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True # Включаем локализацию форматов данных

USE_TZ = True # Используем часовые пояса

USE_L10N = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# Настрока статических файлов.
# Путь к статическим файлам.
# ВАЖНО! Указаываем передний "/",
# чтобы поиск был в корне проекта,
# а не относительно текущего пути.
STATIC_URL = '/static/'
# Список директорий, где будут статические файлы,
# кроме директорий 'static' внутри приложений.
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
# Директория для развертываения в продакшене,
# до продакшана смысла использовать нет.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Настройка медиафайлов:
# все по аналогии со статическими.
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Настройка бэкэнда аутентификации.
AUTHENTICATION_BACKENDS = (
   # Стандартный бэкенд.
   'django.contrib.auth.backends.ModelBackend',
   # Для расширенных прав доступа.
   'guardian.backends.ObjectPermissionBackend',
)

# нестандартная модель юзера и групп
AUTH_USER_MODEL = 'core.Employee'
AUTH_GROUP_MODEL = 'core.EmployeesGroup'
# Расширенные права.
GUARDIAN_GROUP_OBJ_PERMS_MODEL = 'core.EmployeesGroupObjectPermission'
GUARDIAN_USER_OBJ_PERMS_MODEL = 'core.EmployeesObjectPermission'
ANONYMOUS_USER_ID = -1

# Капча.
RECAPTCHA_PUBLIC_KEY = '6LfCu1grAAAAAOloYPsza8SoWKDWi9fnFUozXGmV'
RECAPTCHA_PRIVATE_KEY = '6LfCu1grAAAAAK0agpbreGj7kgZPG33yMOQt7nSq'
#RECAPTCHA_TESTING = True

LOGGING = {
    # Версия конфигурации логирования. 1 — это единственное допустимое значение.
    'version': 1,

    # Если False, логгеры, установленные до загрузки этой конфигурации, не отключаются.
    'disable_existing_loggers': False,

    # Определение форматов сообщений лога
    'formatters': {
        # Определение форматтера с именем 'verbose'
        'verbose': {
            # Указание формата сообщения
            'format': '{levelname} {asctime} {module} {message}',
            # Стиль форматирования, использующий '{}'
            'style': '{',
        },
    },

    # Определение обработчиков сообщений лога
    'handlers': {
        # Определение обработчика с именем 'file'.
        'file': {
            # Минимальный уровень логирования.
            'level': 'DEBUG',
            # Класс обработчика, записывающего сообщения в файл.
            'class': 'logging.handlers.TimedRotatingFileHandler',
            # Путь к файлу логов.
            'filename': 'debug.log',
            # Ротация раз в сутки.
            'when': 'midnight',
            # Интервал ротации (1 день).
            'interval': 1,
            # Хранить логи за последнюю неделю.
            'backupCount': 7,
            # Используемый форматер.
            'formatter': 'verbose',
            # Используемая кодировка.
            'encoding': 'utf-8',
            # Гарантируем, что ротация идёт по UTC-времени.
            'utc': True,
            # Откладывает открытие файла до первой записи
            'delay': True,
        },
        # Определение обработчика с именем 'console'
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',  # Этот класс выводит сообщения в консоль
            'formatter': 'verbose',
        },
    },

    # Определение логгеров
    'loggers': {
        # Настройка логгера с именем 'project'
        'project': {
            # Обработчики, которые будут использоваться этим логгером
            'handlers': ['file', 'console'],  # Добавьте 'console' здесь, чтобы выводить в консоль
            # Минимальный уровень логирования для этого логгера
            'level': 'DEBUG',
            # Будет ли логгер передавать сообщения вышестоящим логгерам
            'propagate': True,
        },
        # Настройка логгера для отлавливания ошибок Django запросов
        'django.request': {
            # Обработчики, которые будут использоваться этим логгером
            'handlers': ['file', 'console'],  # Добавьте 'console' здесь, чтобы выводить в консоль
            # Уровень логирования
            'level': 'ERROR',
            # Не передавать сообщения вышестоящим логгерам
            'propagate': False,
        },
        # Настройка логгера для отлавливания ошибок безопасности Django
        'django.security': {
            # Обработчики, которые будут использоваться этим логгером
            'handlers': ['file', 'console'],  # Добавьте 'console' здесь, чтобы выводить в консоль
            # Уровень логирования
            'level': 'ERROR',
            # Не передавать сообщения вышестоящим логгерам
            'propagate': False,
        },
    },
}

# Путь загрузки файлов CKEditor.
CKEDITOR_UPLOAD_PATH = "uploads/"

# Путь к ресурсам CKEditor
#CKEDITOR_BASEPATH = '/static/ckeditor/ckeditor/'  # Укажите правильный путь к ресурсам CKEditor

# Настройка конфигураций CKEditor для использования в проекте.
CKEDITOR_CONFIGS = {
    # Настройки для профиля 'default', который будет использоваться, если не указан другой профиль.
    'default': {
        # Настройка панели инструментов с различными группами кнопок.
        'toolbar': [
            # Группа инструментов для поиска и редактирования текста: Найти, Заменить, Выделить все, Вырезать, Копировать, Вставить, Отменить, Повторить.
            ['Find', 'Replace', 'SelectAll','Cut', 'Copy', 'Paste', 'Undo', 'Redo'],
            # Группа инструментов для форматирования текста: Жирный, Курсив, Подчеркнутый, Зачеркнутый, Нижний индекс, Верхний индекс.
            ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript'],
            # Группа инструментов для работы с форматами текста и цветами: Форматирование, Цвет текста, Цвет фона.
            ['Format', 'TextColor', 'BGColor'],
            # Группа инструментов для проверки орфографии.
            ['Scayt'],
            # Группа инструментов для копирования форматирования и его удаления.
            ['CopyFormatting', 'RemoveFormat'],
            # Группа инструментов для работы со списками и таблицами.
            ['NumberedList', 'BulletedList', 'Table'],
            # Группа инструментов для выравнивания текста: По левому краю, По центру, По правому краю, По ширине.
            ['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
            # Увеличить уменьшит отступ.
            #['Outdent', 'Indent'],
            # Группа инструментов для работы с изображениями, видео, вставками и ссылками.
            ['Image', 'Video', 'Iframe', 'Link', 'Unlink'],
            # Группа инструментов для вставки специальных символов, математических формул, фрагментов кода и смайликов.
            ['SpecialChar', 'Mathjax', 'CodeSnippet', 'Smiley'],
            # Дополнительные инструменты: Предварительный просмотр, Исходный код, Отображение блоков, Максимизация рабочего окна.
            ['Source', 'ShowBlocks', 'Maximize'],
        ],
        # Набор дополнительных плагинов, улучшающих функциональность редактора.
        'extraPlugins': [
            'autogrow',
            'image2',  # Улучшенное добавление и редактирование изображений.
            #'embed', 'embedbase', 'embedsemantic', # Вставка медиа контента из различных источников.
            'video',  # Вставка видео.
            'codesnippet',  # Вставка и форматирование кода с подсветкой синтаксиса.
            'copyformatting',  # Копирование и применение форматирования.
            'find',  # Расширенные возможности поиска и замены в тексте.
            'mathjax',  # Поддержка вставки и отображения математических формул.
            'widget',  # Поддержка виджетов.
            'clipboard',  # Улучшенное управление буфером обмена.
            'lineutils',  # Утилиты для работы со строками.
            'specialchar',  # Вставка специальных символов.
            'smiley',  # Вставка смайликов.
            'iframe',  # Вставка и работа с iframe.
            'iframedialog',  # Диалоги для работы с iframe.
            #'tableresize',  # Изменение размера таблиц путем перетаскивания.
            'tableselection',  # Улучшенное выделение и работа с таблицами.
            'tabletools',  # Дополнительные инструменты для работы с таблицами.
            'showblocks',  # Визуализация блоков HTML в редакторе.
            'colordialog', # Добавляет диалог выбора цвета для текстового редактора.
            'magicline', # Создает визуальные указатели для вставки элементов в текст.
        ],
        # Установка языка интерфейса редактора на русский.
        'language': 'ru',
        # Установка режима вставки по умолчанию на вставку абзаца (2) вместо новой строки (1).
        'enterMode': 2,
        # Установка режима shift+enter на вставку новой строки.
        'shiftEnterMode': 1,
        # Разрешение любого содержимого в редакторе.
        'allowedContent': True,
        # Включение SCAYT по умолчанию.
        'scayt_autoStartup': True,
        # Установка языка SCAYT на русский.
        'scayt_sLang': 'ru_RU',
        # Разрешение дополнительного содержимого, например, iframe со всеми атрибутами.
        'extraAllowedContent': 'iframe[*]',
        # Провайдер для вставки медиа контента.
        #'embed_provider': 'https://noembed.com/embed?url={url}',
        # Библиотека для MathJax - отображение математических формул.
        'mathJaxLib': '//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS_HTML',
        # Класс для элементов, содержащих MathJax формулы.
        'mathJaxClass': 'my-math',
        # Тема для отображения сниппетов кода.
        'codeSnippet_theme': 'arta',
        # Включение переноса строк сниппетов кода.
        'codeSnippet_lineWrapping': True,
        # Настройка, позволяющая использовать встроенную проверку орфографии браузера.
        'disableNativeSpellChecker': False,
        # Настройки языков для сниппетов кода, позволяющие выбирать язык подсветки синтаксиса.
        'codeSnippet_languages': {
            '1c': '1C',
            'python': 'Python',
            'javascript': 'JavaScript',
            'java': 'Java',
            'html': 'HTML',
            'css': 'CSS',
            'php': 'PHP',
            'ruby': 'Ruby',
            'cpp': 'C++',
            'csharp': 'C#',
            'typescript': 'TypeScript',
            'swift': 'Swift',
            'go': 'Go',
            'rust': 'Rust',
            'kotlin': 'Kotlin',
            'perl': 'Perl',
            'sql': 'SQL',
            'json': 'JSON',
            'xml': 'XML',
            'yaml': 'YAML',
            'bash': 'Bash',
            'shell': 'Shell',
            'scss': 'SCSS',
            'less': 'Less',
            'lua': 'Lua',
            'makefile': 'Makefile',
            'markdown': 'Markdown',
            'objectivec': 'Objective-C',
            'pgsql': 'PostgreSQL',
            'php-template': 'PHP Template',
            'plaintext': 'Plain Text',
            'python-repl': 'Python REPL',
            'q': 'Q',
            'r': 'R',
            'vbnet': 'VB.NET',
            'wasm': 'WASM',
        },
    },
}


# Разрешение на фреймы для пакетов.
X_FRAME_OPTIONS = 'SAMEORIGIN'

# Хранение сессий в БД.
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True

# Вход
LOGIN_URL = 'login'
LOGOUT_URL = 'login'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'

# Настройки почты.
# Эмейл бекэнд.
#EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # Отправляет письмо.
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # Печатает письмо в консоли.
#EMAIL_HOST = 'smtp.ethereal.email'  # SMTP-сервер smtp.ethereal.email.
EMAIL_HOST = 'smtp.yandex.ru'  # SMTP-сервер smtp.yandex.ru.
EMAIL_PORT = 465  # Порт SMTP-сервера (обычно 587 для TLS или 465 для SSL).
EMAIL_USE_TLS = False  # Использовать ли TLS (для обеспечения безопасности). Для сервера smtp.ethereal.email и дургих.
EMAIL_USE_SSL = True  # Использовать ли SSL (для обеспечения безопасности). Для сервера smtp.yandex.ru и других.
#EMAIL_HOST_USER = 'diego.aufderhar37@ethereal.email'  # Ваш адрес электронной почты от smtp.ethereal.email.
#EMAIL_HOST_PASSWORD = 'yHRVdXG8c7kBeK2aD6'  # Пароль от вашего адреса электронной почты от smtp.ethereal.email.
EMAIL_HOST_USER = 's.klimeshov.home@yandex.ru'  # Ваш адрес электронной почты от smtp.yandex.ru.
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')  # Пароль от вашего адреса электронной почты от smtp.yandex.ru.
#DEFAULT_FROM_EMAIL = "diego.aufderhar37@ethereal.email" # Адрес отправителя.
DEFAULT_FROM_EMAIL = "s.klimeshov.home@yandex.ru" # Адрес отправителя.

# Настройки АПИ.
REST_FRAMEWORK = {
    # Классы аутентификации по умолчанию.
    'DEFAULT_AUTHENTICATION_CLASSES': [
        #'rest_framework.authentication.BasicAuthentication',  # Базовая аутентификация (логин/пароль в заголовке HTTP)
        #'rest_framework.authentication.SessionAuthentication',  # Аутентификация на основе сессий Django
        #'rest_framework.authentication.TokenAuthentication',  # Аутентификация с использованием токенов
        #'rest_framework_api_key.authentication.APIKeyAuthentication',  # Аутентификация с использованием API-ключей
        #'rest_framework_simplejwt.authentication.JWTAuthentication',  # Аутентификация с использованием JWT
    ],

    # Классы разрешений по умолчанию.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework_api_key.permissions.HasAPIKey',  # Доступ тех у кого есть ключ
        #'rest_framework.permissions.AllowAny',  # Доступ открыт для всех
        #'rest_framework.permissions.IsAuthenticated',  # Доступ только для аутентифицированных пользователей
        #'rest_framework.permissions.IsAdminUser',  # Доступ только для администраторов (is_staff)
        #'rest_framework.permissions.IsAuthenticatedOrReadOnly',  # Чтение для всех, изменения только для аутентифицированных
        #'rest_framework.permissions.DjangoModelPermissions',  # Проверяет разрешения на уровне моделей Django
        #'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',  # Комбинация разрешений моделей и открытого доступа для чтения
    ],

    # Параметры пагинации.
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',  # Пагинация по номеру страницы
    'PAGE_SIZE': 10,  # Количество объектов на странице по умолчанию

    # Классы фильтрации по умолчанию.
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',  # Фильтрация на основе Django Filter
        'rest_framework.filters.SearchFilter',  # Фильтрация на основе строк поиска
        'rest_framework.filters.OrderingFilter',  # Сортировка объектов в ответе
    ],

    # Классы рендеринга (вывода данных) по умолчанию.
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',  # Рендеринг данных в формате JSON
        # Можно добавить другие рендереры, например, BrowsableAPIRenderer, XMLRenderer, YAMLRenderer, и т.д.
    ],

    # Классы парсинга (входящих данных) по умолчанию.
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',  # Парсинг входящих данных в формате JSON
        # Вы можете добавить другие парсеры, такие как FormParser, MultiPartParser, или XMLParser, если ваш API должен обрабатывать разные типы данных.
    ],

    # Обработчик исключений (ошибок) по умолчанию.
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',  # Стандартный обработчик исключений DRF
    # Если нужно кастомное поведение при обработке ошибок, можно указать свой обработчик.

    # Настройка режима тестирования.
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',  # Использовать JSON по умолчанию при тестировании API
    # Удобно, чтобы не нужно было задавать формат данных в каждом тесте вручную.

    # Версионирование API.
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',  # Версионирование по URL (например, /v1/resource)
    # Можно использовать другие методы версионирования, такие как по HTTP-заголовкам или по параметрам запросов.
}